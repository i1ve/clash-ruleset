name: Build rule-set
on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      - ".github/workflows/delete-old-workflows.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "RELEASE_NAME=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "category-ads-all=https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-domains.txt" >> $GITHUB_ENV
          echo "private1=https://raw.githubusercontent.com/v2fly/domain-list-community/master/data/private" >> $GITHUB_ENV
          echo "private2=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Lan/Lan.list" >> $GITHUB_ENV
          echo "openai=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.list" >> $GITHUB_ENV
          echo "telegram=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.list" >> $GITHUB_ENV
          echo "tiktok=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.list" >> $GITHUB_ENV
          echo "netflix=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix.list" >> $GITHUB_ENV
          echo "youtube=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.list" >> $GITHUB_ENV
          echo "douyu=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Douyu/Douyu.list" >> $GITHUB_ENV
          echo "bilibili=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/BiliBili/BiliBili.list" >> $GITHUB_ENV
          echo "bytedance=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ByteDance/ByteDance.list" >> $GITHUB_ENV
          echo "gfw=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Proxy/Proxy_Domain_For_Clash.txt" >> $GITHUB_ENV
          echo "cn=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/ChinaMax/ChinaMax_Domain_For_Clash.txt" >> $GITHUB_ENV
          echo "telegramip=https://core.telegram.org/resources/cidr.txt" >> $GITHUB_ENV
          echo "nxip=https://raw.githubusercontent.com/QiuSimons/Netflix_IP/master/getflix.txt" >> $GITHUB_ENV
          echo "blip=https://raw.githubusercontent.com/xishang0128/geoip/release/text/bilibili.txt" >> $GITHUB_ENV
          echo "privateip=https://raw.githubusercontent.com/i1ve/clash-geoip/release/text/private.txt" >> $GITHUB_ENV
          echo "cnip=https://raw.githubusercontent.com/Hackl0us/GeoIP2-CN/release/CN-ip-cidr.txt" >> $GITHUB_ENV
        shell: bash

      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Checkout cokebar/gfwlist2dnsmasq
        uses: actions/checkout@v3
        with:
          repository: cokebar/gfwlist2dnsmasq
          path: gfwlist2dnsmasq

      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: latest
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true
          repo: i1ve/clash-ruleset

      - name: Generate category-ads-all
        run: |
          mkdir -p ./tmp ./publish
          curl -sSL ${category-ads-all} | grep -v '#' | sed '/^\s*$/d' > ./publish/category-ads-all.txt

      - name: Generate private
        run: |
          curl -sSL ${private1} | grep -v '#' | sed '/^\s*$/d' > ./tmp/temp-private.txt
          curl -sSL ${private2} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./tmp/temp-private.txt
          sort --ignore-case -u ./tmp/temp-private.txt >> ./publish/private.txt

      - name: Generate openai
        run: |
          curl -sSL ${openai} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/openai.txt

      - name: Generate telegram
        run: |
          curl -sSL ${telegram} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/telegram.txt

      - name: Generate tiktok
        run: |
          curl -sSL ${tiktok} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/tiktok.txt

      - name: Generate netflix
        run: |
          curl -sSL ${netflix} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/netflix.txt

      - name: Generate youtube
        run: |
          curl -sSL ${youtube} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/youtube.txt

      - name: Generate douyu
        run: |
          curl -sSL ${douyu} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/douyu.txt

      - name: Generate bilibili
        run: |
          curl -sSL ${bilibili} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/bilibili.txt

      - name: Generate bytedance
        run: |
          curl -sSL ${bytedance} | grep -Ev '#|DOMAIN-KEYWORD' | grep 'DOMAIN' | sed "s/DOMAIN,//g" | sed "s/DOMAIN-SUFFIX,/+./g" | sed '/^\s*$/d' >> ./publish/bytedance.txt

      - name: Generate gfw
        run: |
          cd gfwlist2dnsmasq || exit 1
          chmod +x ./gfwlist2dnsmasq.sh
          ./gfwlist2dnsmasq.sh -l -o ../tmp/temp-gfw.txt
          curl -sSL ${gfw} | grep -Ev '#|payload:' | sed '/^\s*$/d' >> ../tmp/temp-gfw.txt
          sort --ignore-case -u ../tmp/temp-gfw.txt >> ../publish/gfw.txt

      - name: Generate cn
        run: |
          curl -sSL ${cn} | grep -Ev '#|google' > ./publish/cn.txt

      - name: Generate telegramip
        run: |
          curl -sSL ${telegramip} | sed '/^\s*$/d' >> ./publish/telegramip.txt

      - name: Generate nxip
        run: |
          curl -sSL ${nxip} | sed '/^\s*$/d' >> ./publish/nxip.txt

      - name: Generate blip
        run: |
          curl -sSL ${blip} | sed '/^\s*$/d' >> ./publish/blip.txt

      - name: Generate privateip
        run: |
          curl -sSL ${privateip} | sed '/^\s*$/d' >> ./publish/privateip.txt

      - name: Generate cnip
        run: |
          curl -sSL ${cnip} | sed '/^\s*$/d' >> ./publish/cnip.txt

      - name: Release and upload assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: latest
          tag: latest
          file_glob: true
          file: ./publish/*

      - name: Git push assets to "release" branch
        run: |
          cd ./publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Purge jsDelivr CDN
        run: |
          cd ./publish || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done
